import SwiftUI
import SwiftData

struct ContentView: View {
    @Environment(\.modelContext) private var modelContext
    @Query private var items: [Item]
    @Query private var categories: [Category]
    @State private var newItemName: String = ""
    @State private var newCategoryName: String = ""
    @State private var errorMessage: AlertItem?
    @State private var searchText: String = ""

    var body: some View {
        NavigationView {
            VStack {
                TextField("Search Items", text: $searchText)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()

                TextField("New Item Name", text: $newItemName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()

                Button(action: addItem) {
                    Text("Add Item")
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .padding()

                TextField("New Category Name", text: $newCategoryName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()

                Button(action: addCategory) {
                    Text("Add Category")
                        .padding()
                        .background(Color.green)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .padding()

                List {
                    ForEach(items.filter { searchText.isEmpty || $0.name.localizedCaseInsensitiveContains(searchText) }) { item in
                        NavigationLink(destination: DetailView(item: item)) {
                            Text(item.name)
                        }
                    }
                    .onDelete(perform: deleteItems)
                }
            }
            .navigationTitle("Items & Categories")
            .padding()
            .alert(item: Binding<AlertItem?>(get: { errorMessage }, set: { errorMessage = $0 })) { error in
                Alert(title: Text("Error"), message: Text(error.message), dismissButton: .default(Text("OK")))
            }
        }
    }

    private func addItem() {
        guard !newItemName.isEmpty else { return } // Ensure the name is not empty
        withAnimation {
            let newItem = Item(name: newItemName, timestamp: Date())
            modelContext.insert(newItem)
            newItemName = "" // Clear the text field after adding
        }
    }

    private func addCategory() {
        guard !newCategoryName.isEmpty else { return } // Ensure the category name is not empty
        withAnimation {
            let newCategory = Category(name: newCategoryName)
            modelContext.insert(newCategory)
            newCategoryName = "" // Clear the text field after adding
        }
    }

    private func deleteItems(offsets: IndexSet) {
        withAnimation {
            for index in offsets {
                modelContext.delete(items[index]) // Delete the selected item
            }
        }
    }
}
